# -*- coding: utf-8 -*-
"""Homework1_stub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8faDrY-vqVsE7woOAFN5iDqWcTd-VQO
"""

import json
from matplotlib import pyplot as plt
from collections import defaultdict
from sklearn import linear_model
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import PolynomialFeatures
import numpy as np
import random
import gzip
import math

import warnings
warnings.filterwarnings("ignore")

def assertFloat(x): # Checks that an answer is a float
    assert type(float(x)) == float

def assertFloatList(items, N):
    assert len(items) == N
    assert [type(float(x)) for x in items] == [float]*N

f = gzip.open("young_adult_10000.json.gz")
dataset = []
for l in f:
    dataset.append(json.loads(l))

len(dataset)

answers = {} # Put your answers to each question in this dictionary

dataset[0]

### Question 1

def feature1(datum):
    # your implementation
    exclamation_mark = [d['review_text'].count('!') for d in datum]
    ratings = [d['rating'] for d in datum]
    X = np.array(exclamation_mark).reshape(-1,1)
    y = np.array(ratings).reshape(-1,1)
    model = linear_model.LinearRegression()
    model.fit(X,y)
    theta0 = model.intercept_[0]
    theta1 = model.coef_[0][0]

    predictions = model.predict(X)
    mse = mean_squared_error(y, predictions)

    return theta0, theta1, mse

theta0, theta1, mse = feature1(dataset)
print(theta0, theta1, mse)
answers['Q1'] = [theta0, theta1, mse]

assertFloatList(answers['Q1'], 3) # Check the format of your answer (three floats)

### Question 2

def feature2(datum):
  exclamation_mark = [d['review_text'].count('!') for d in datum]
  length = [len(d['review_text']) for d in datum]
  ratings = [d['rating'] for d in datum]
  X = np.hstack([np.array(exclamation_mark).reshape(-1,1), np.array(length).reshape(-1,1)])
  y = np.array(ratings).reshape(-1,1)
  model = linear_model.LinearRegression()
  model.fit(X,y)
  theta0 = model.intercept_[0]
  theta1, theta2 = model.coef_[0]

  predictions = model.predict(X)
  mse = mean_squared_error(y, predictions)

  return theta0, theta1, theta2, mse

theta0, theta1, theta2, mse = feature2(dataset)
print(theta0, theta1, theta2, mse)
answers['Q2'] = [theta0, theta1, theta2, mse]

assertFloatList(answers['Q2'], 4)

### Question 3

def feature3(datum, deg):
    # feature for a specific polynomial degree
    exclamation_mark = np.array([d['review_text'].count('!') for d in datum]).reshape(-1,1)
    ratings = np.array([d['rating'] for d in datum]).reshape(-1,1)
    mses = []
    for degree in range(1,deg+1):
      poly = PolynomialFeatures(degree)
      X_poly = poly.fit_transform(exclamation_mark)
      model = linear_model.LinearRegression()
      model.fit(X_poly, ratings)
      predictions = model.predict(X_poly)
      mse = mean_squared_error(ratings, predictions)
      mses.append(mse)

    return mses

mses = feature3(dataset, 5)
print(mses)
answers['Q3'] = mses

assertFloatList(answers['Q3'], 5)# List of length 5

### Question 4

def feature4(datum, deg):
    # feature for a specific polynomial degree
    exclamation_mark = np.array([d['review_text'].count('!') for d in datum]).reshape(-1,1)
    ratings = np.array([d['rating'] for d in datum]).reshape(-1,1)
    train_X = exclamation_mark[:int(len(exclamation_mark)/2)]
    test_X = exclamation_mark[int(len(exclamation_mark)/2):]
    train_y = ratings[:int(len(ratings)/2)]
    test_y = ratings[int(len(ratings)/2):]
    mses = []
    for degree in range(1,deg+1):
      poly = PolynomialFeatures(degree)
      X_poly = poly.fit_transform(train_X)
      test_X_poly = poly.fit_transform(test_X)
      model = linear_model.LinearRegression()
      model.fit(X_poly, train_y)
      predictions = model.predict(test_X_poly)
      mse = mean_squared_error(test_y, predictions)
      mses.append(mse)

    return mses

mses = feature4(dataset, 5)
print(mses)
answers['Q4'] = mses

assertFloatList(answers['Q4'], 5)

### Question 5

def feature5(datum):
    # feature for a specific polynomial degree
    ratings = np.array([d['rating'] for d in datum]).reshape(-1,1)
    train_y = ratings[:int(len(ratings)/2)]
    test_y = ratings[int(len(ratings)/2):]
    theta_0 = np.median(train_y)
    #theta_0 = np.mean(train_y)
    mae = np.mean(np.abs(test_y - theta_0))
    return theta_0, mae

theta_0, mae = feature5(dataset)
print(theta_0, mae)
answers['Q5'] = mae

assertFloat(answers['Q5'])

### Question 6

f = open("beer_50000.json")
dataset = []
for l in f:
    if 'user/gender' in l:
        dataset.append(eval(l))

len(dataset)

X = np.array([d['review/text'].count('!') for d in dataset]).reshape(-1,1)
y = np.array([0 if d['user/gender'] == 'Male' else 1 for d in dataset]).reshape(-1,1)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix

def feature6(X, y):
  log_reg = LogisticRegression()
  log_reg.fit(X, y)
  y_pred = log_reg.predict(X)
  tn, fp, fn, tp = confusion_matrix(y, y_pred).ravel()
  ber = 0.5 * (fn / (tn + fn) + fp / (tp + fp))
  results = [tp, tn, fp, fn, ber]
  return results

res = feature6(X, y)
print(res)
#answers['Q6'] = [TP, TN, FP, FN, BER]
answers['Q6'] = res

assertFloatList(answers['Q6'], 5)

### Question 7

def feature7(X, y):
  log_reg = LogisticRegression(class_weight='balanced')
  log_reg.fit(X, y)
  y_pred = log_reg.predict(X)
  tn, fp, fn, tp = confusion_matrix(y, y_pred).ravel()
  ber = 0.5 * (fn / (tn + fn) + fp / (tp + fp))
  results = [tp, tn, fp, fn, ber]
  return results

res = feature7(X, y)
print(res)
answers["Q7"] = res

assertFloatList(answers['Q7'], 5)

### Question 8

from sklearn.metrics import confusion_matrix, precision_score

def feature8(X, y):
  log_reg = LogisticRegression(class_weight='balanced')
  log_reg.fit(X, y)
  y_pred = log_reg.predict(X)
  pred_K = []


  for k in [1,10,100,1000,10000]:
    precision = precision_score(y[:k], y_pred[:k], average='micro')
    pred_K.append(precision)

  return pred_K

precisionList = feature8(X, y)
print(precisionList)
answers['Q8'] = precisionList

assertFloatList(answers['Q8'], 5) #List of five floats

f = open("answers_hw1.txt", 'w') # Write your answers to a file
f.write(str(answers) + '\n')
f.close()

